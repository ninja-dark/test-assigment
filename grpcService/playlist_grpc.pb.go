// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: playlist.proto

package grpcService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayCaseServicClient is the client API for PlayCaseServic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayCaseServicClient interface {
	AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error)
	ReadSong(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadSongResponse, error)
	UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error)
	DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error)
	Player(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*Status, error)
}

type playCaseServicClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayCaseServicClient(cc grpc.ClientConnInterface) PlayCaseServicClient {
	return &playCaseServicClient{cc}
}

func (c *playCaseServicClient) AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error) {
	out := new(AddSongResponse)
	err := c.cc.Invoke(ctx, "/playcase.playCaseServic/AddSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playCaseServicClient) ReadSong(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadSongResponse, error) {
	out := new(ReadSongResponse)
	err := c.cc.Invoke(ctx, "/playcase.playCaseServic/ReadSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playCaseServicClient) UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error) {
	out := new(UpdateSongResponse)
	err := c.cc.Invoke(ctx, "/playcase.playCaseServic/UpdateSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playCaseServicClient) DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error) {
	out := new(DeleteSongResponse)
	err := c.cc.Invoke(ctx, "/playcase.playCaseServic/DeleteSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playCaseServicClient) Player(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/playcase.playCaseServic/Player", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayCaseServicServer is the server API for PlayCaseServic service.
// All implementations must embed UnimplementedPlayCaseServicServer
// for forward compatibility
type PlayCaseServicServer interface {
	AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error)
	ReadSong(context.Context, *emptypb.Empty) (*ReadSongResponse, error)
	UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error)
	DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error)
	Player(context.Context, *PlayerRequest) (*Status, error)
	mustEmbedUnimplementedPlayCaseServicServer()
}

// UnimplementedPlayCaseServicServer must be embedded to have forward compatible implementations.
type UnimplementedPlayCaseServicServer struct {
}

func (UnimplementedPlayCaseServicServer) AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedPlayCaseServicServer) ReadSong(context.Context, *emptypb.Empty) (*ReadSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSong not implemented")
}
func (UnimplementedPlayCaseServicServer) UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSong not implemented")
}
func (UnimplementedPlayCaseServicServer) DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedPlayCaseServicServer) Player(context.Context, *PlayerRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Player not implemented")
}
func (UnimplementedPlayCaseServicServer) mustEmbedUnimplementedPlayCaseServicServer() {}

// UnsafePlayCaseServicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayCaseServicServer will
// result in compilation errors.
type UnsafePlayCaseServicServer interface {
	mustEmbedUnimplementedPlayCaseServicServer()
}

func RegisterPlayCaseServicServer(s grpc.ServiceRegistrar, srv PlayCaseServicServer) {
	s.RegisterService(&PlayCaseServic_ServiceDesc, srv)
}

func _PlayCaseServic_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayCaseServicServer).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playcase.playCaseServic/AddSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayCaseServicServer).AddSong(ctx, req.(*AddSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayCaseServic_ReadSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayCaseServicServer).ReadSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playcase.playCaseServic/ReadSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayCaseServicServer).ReadSong(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayCaseServic_UpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayCaseServicServer).UpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playcase.playCaseServic/UpdateSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayCaseServicServer).UpdateSong(ctx, req.(*UpdateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayCaseServic_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayCaseServicServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playcase.playCaseServic/DeleteSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayCaseServicServer).DeleteSong(ctx, req.(*DeleteSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayCaseServic_Player_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayCaseServicServer).Player(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playcase.playCaseServic/Player",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayCaseServicServer).Player(ctx, req.(*PlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayCaseServic_ServiceDesc is the grpc.ServiceDesc for PlayCaseServic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayCaseServic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playcase.playCaseServic",
	HandlerType: (*PlayCaseServicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSong",
			Handler:    _PlayCaseServic_AddSong_Handler,
		},
		{
			MethodName: "ReadSong",
			Handler:    _PlayCaseServic_ReadSong_Handler,
		},
		{
			MethodName: "UpdateSong",
			Handler:    _PlayCaseServic_UpdateSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _PlayCaseServic_DeleteSong_Handler,
		},
		{
			MethodName: "Player",
			Handler:    _PlayCaseServic_Player_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlist.proto",
}
